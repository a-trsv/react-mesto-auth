{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._address = options.address;\n    this._groupId = options.groupId;\n    this._token = options.token;\n  }\n\n  getUserInfo() {\n    return fetch(`${this._address}/${this._groupId}/users/me`, {\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  patchUserInfo(newUserData) {\n    return fetch(`${this._address}/${this._groupId}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: newUserData.name,\n        about: newUserData.about\n      })\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  getCards() {\n    return fetch(`${this._address}/${this._groupId}/cards`, {\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  postCard({\n    name: inputName,\n    link: inputSRC\n  }) {\n    return fetch(`${this._address}/${this._groupId}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: inputName,\n        link: inputSRC\n      })\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._address}/${this._groupId}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    if (!isLiked) {\n      return this.deleteLike(cardId);\n    } else {\n      return this.setLike(cardId);\n    }\n  }\n\n  setLike(cardId) {\n    return fetch(`${this._address}/${this._groupId}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  deleteLike(cardId) {\n    return fetch(`${this._address}/${this._groupId}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  patchUserAvatar(avatarSRC) {\n    return fetch(`${this._address}/${this._groupId}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatarSRC\n      })\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  _checkServerResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } // Если происходит ошибка, отклоняем промис\n\n\n    return Promise.reject(`${res.status}`);\n  }\n\n}\n\nconst api = new Api({\n  address: 'https://mesto.nomoreparties.co/v1',\n  groupId: 'cohort-24',\n  token: '4d34d552-bc81-44cb-b18a-2296a1ced45f'\n});\nexport default api;","map":{"version":3,"sources":["/Users/AleksiTarasov/Desktop/develop/mesto-react/src/utils/api.js"],"names":["Api","constructor","options","_address","address","_groupId","groupId","_token","token","getUserInfo","fetch","headers","authorization","then","res","_checkServerResponse","patchUserInfo","newUserData","method","body","JSON","stringify","name","about","getCards","postCard","inputName","link","inputSRC","deleteCard","cardId","changeLikeCardStatus","isLiked","deleteLike","setLike","patchUserAvatar","avatarSRC","avatar","ok","json","Promise","reject","status","api"],"mappings":"AAAA,MAAMA,GAAN,CAAU;AACNC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,QAAL,GAAgBD,OAAO,CAACE,OAAxB;AACA,SAAKC,QAAL,GAAgBH,OAAO,CAACI,OAAxB;AACA,SAAKC,MAAL,GAAcL,OAAO,CAACM,KAAtB;AACH;;AACDC,EAAAA,WAAW,GAAG;AACV,WAAOC,KAAK,CAAE,GAAE,KAAKP,QAAS,IAAG,KAAKE,QAAS,WAAnC,EAA+C;AACvDM,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKL,MADf;AAEL,wBAAgB;AAFX;AAD8C,KAA/C,CAAL,CAMFM,IANE,CAMGC,GAAG,IAAI,KAAKC,oBAAL,CAA0BD,GAA1B,CANV,CAAP;AAOH;;AAEDE,EAAAA,aAAa,CAACC,WAAD,EAAc;AACvB,WAAOP,KAAK,CAAE,GAAE,KAAKP,QAAS,IAAG,KAAKE,QAAS,WAAnC,EAA+C;AACvDa,MAAAA,MAAM,EAAE,OAD+C;AAEvDP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKL,MADf;AAEL,wBAAgB;AAFX,OAF8C;AAMvDY,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,IAAI,EAAEL,WAAW,CAACK,IADD;AAEjBC,QAAAA,KAAK,EAAEN,WAAW,CAACM;AAFF,OAAf;AANiD,KAA/C,CAAL,CAWFV,IAXE,CAWGC,GAAG,IAAI,KAAKC,oBAAL,CAA0BD,GAA1B,CAXV,CAAP;AAYH;;AAEDU,EAAAA,QAAQ,GAAG;AACP,WAAOd,KAAK,CAAE,GAAE,KAAKP,QAAS,IAAG,KAAKE,QAAS,QAAnC,EAA4C;AACpDM,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKL,MADf;AAEL,wBAAgB;AAFX;AAD2C,KAA5C,CAAL,CAMFM,IANE,CAMGC,GAAG,IAAI,KAAKC,oBAAL,CAA0BD,GAA1B,CANV,CAAP;AAOH;;AAEDW,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEI,SAAR;AAAmBC,IAAAA,IAAI,EAAEC;AAAzB,GAAD,EAAsC;AAC1C,WAAOlB,KAAK,CAAE,GAAE,KAAKP,QAAS,IAAG,KAAKE,QAAS,QAAnC,EAA4C;AACpDa,MAAAA,MAAM,EAAE,MAD4C;AAEpDP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKL,MADf;AAEL,wBAAgB;AAFX,OAF2C;AAMpDY,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,IAAI,EAAEI,SADW;AAEjBC,QAAAA,IAAI,EAAEC;AAFW,OAAf;AAN8C,KAA5C,CAAL,CAWFf,IAXE,CAWGC,GAAG,IAAI,KAAKC,oBAAL,CAA0BD,GAA1B,CAXV,CAAP;AAYH;;AAEDe,EAAAA,UAAU,CAACC,MAAD,EAAS;AACf,WAAOpB,KAAK,CAAE,GAAE,KAAKP,QAAS,IAAG,KAAKE,QAAS,UAASyB,MAAO,EAAnD,EAAsD;AAC9DZ,MAAAA,MAAM,EAAE,QADsD;AAE9DP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKL;AADf;AAFqD,KAAtD,CAAL,CAMFM,IANE,CAMGC,GAAG,IAAI,KAAKC,oBAAL,CAA0BD,GAA1B,CANV,CAAP;AAOH;;AAEDiB,EAAAA,oBAAoB,CAACD,MAAD,EAASE,OAAT,EAAkB;AAClC,QAAI,CAACA,OAAL,EAAc;AACV,aAAO,KAAKC,UAAL,CAAgBH,MAAhB,CAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAKI,OAAL,CAAaJ,MAAb,CAAP;AACH;AACJ;;AAEDI,EAAAA,OAAO,CAACJ,MAAD,EAAS;AACZ,WAAOpB,KAAK,CAAE,GAAE,KAAKP,QAAS,IAAG,KAAKE,QAAS,gBAAeyB,MAAO,EAAzD,EAA4D;AACpEZ,MAAAA,MAAM,EAAE,KAD4D;AAEpEP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKL;AADf;AAF2D,KAA5D,CAAL,CAMFM,IANE,CAMGC,GAAG,IAAI,KAAKC,oBAAL,CAA0BD,GAA1B,CANV,CAAP;AAOH;;AAEDmB,EAAAA,UAAU,CAACH,MAAD,EAAS;AACf,WAAOpB,KAAK,CAAE,GAAE,KAAKP,QAAS,IAAG,KAAKE,QAAS,gBAAeyB,MAAO,EAAzD,EAA4D;AACpEZ,MAAAA,MAAM,EAAE,QAD4D;AAEpEP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKL;AADf;AAF2D,KAA5D,CAAL,CAMFM,IANE,CAMGC,GAAG,IAAI,KAAKC,oBAAL,CAA0BD,GAA1B,CANV,CAAP;AAOH;;AAEDqB,EAAAA,eAAe,CAACC,SAAD,EAAY;AACvB,WAAO1B,KAAK,CAAE,GAAE,KAAKP,QAAS,IAAG,KAAKE,QAAS,kBAAnC,EAAsD;AAC9Da,MAAAA,MAAM,EAAE,OADsD;AAE9DP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKL,MADf;AAEL,wBAAgB;AAFX,OAFqD;AAM9DY,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBgB,QAAAA,MAAM,EAAED;AADS,OAAf;AANwD,KAAtD,CAAL,CAUFvB,IAVE,CAUGC,GAAG,IAAI,KAAKC,oBAAL,CAA0BD,GAA1B,CAVV,CAAP;AAWH;;AAEDC,EAAAA,oBAAoB,CAACD,GAAD,EAAM;AACtB,QAAIA,GAAG,CAACwB,EAAR,EAAY;AACR,aAAOxB,GAAG,CAACyB,IAAJ,EAAP;AACH,KAHqB,CAItB;;;AACA,WAAOC,OAAO,CAACC,MAAR,CAAgB,GAAE3B,GAAG,CAAC4B,MAAO,EAA7B,CAAP;AACH;;AAlHK;;AAqHV,MAAMC,GAAG,GAAG,IAAI3C,GAAJ,CAAQ;AAChBI,EAAAA,OAAO,EAAE,mCADO;AAEhBE,EAAAA,OAAO,EAAE,WAFO;AAGhBE,EAAAA,KAAK,EAAE;AAHS,CAAR,CAAZ;AAMA,eAAemC,GAAf","sourcesContent":["class Api {\n    constructor(options) {\n        this._address = options.address\n        this._groupId = options.groupId\n        this._token = options.token\n    }\n    getUserInfo() {\n        return fetch(`${this._address}/${this._groupId}/users/me`, {\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    patchUserInfo(newUserData) {\n        return fetch(`${this._address}/${this._groupId}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: newUserData.name,\n                about: newUserData.about,\n            })\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    getCards() {\n        return fetch(`${this._address}/${this._groupId}/cards`, {\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n    \n    postCard({ name: inputName, link: inputSRC }) {\n        return fetch(`${this._address}/${this._groupId}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: inputName,\n                link: inputSRC\n            })\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._address}/${this._groupId}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    changeLikeCardStatus(cardId, isLiked) {\n        if (!isLiked) {\n            return this.deleteLike(cardId);\n        } else {\n            return this.setLike(cardId);\n        }\n    }\n\n    setLike(cardId) {\n        return fetch(`${this._address}/${this._groupId}/cards/likes/${cardId}`, {\n            method: 'PUT',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    deleteLike(cardId) {\n        return fetch(`${this._address}/${this._groupId}/cards/likes/${cardId}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n    \n    patchUserAvatar(avatarSRC) {\n        return fetch(`${this._address}/${this._groupId}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: avatarSRC\n            })\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    _checkServerResponse(res) {\n        if (res.ok) {\n            return res.json()\n        }\n        // Если происходит ошибка, отклоняем промис\n        return Promise.reject(`${res.status}`)\n    }\n}\n\nconst api = new Api({\n    address: 'https://mesto.nomoreparties.co/v1',\n    groupId: 'cohort-24',\n    token: '4d34d552-bc81-44cb-b18a-2296a1ced45f'\n})\n\nexport default api"]},"metadata":{},"sourceType":"module"}