{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._address = options.address;\n    this._groupId = options.groupId;\n    this._token = options.token;\n  }\n\n  getUserInfo() {\n    return fetch(`${this._address}/${this._groupId}/users/me`, {\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  patchUserInfo({\n    name: inputName,\n    about: inputJob\n  }) {\n    return fetch(`${this._address}/${this._groupId}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: inputName,\n        about: inputJob\n      })\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  getCards() {\n    return fetch(`${this._address}/${this._groupId}/cards`, {\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  postCard({\n    name: inputName,\n    link: inputSRC\n  }) {\n    return fetch(`${this._address}/${this._groupId}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: inputName,\n        link: inputSRC\n      })\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._address}/${this._groupId}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  setLike(cardId) {\n    return fetch(`${this._address}/${this._groupId}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  deleteLike(cardId) {\n    return fetch(`${this._address}/${this._groupId}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  patchUserAvatar(avatarSRC) {\n    return fetch(`${this._address}/${this._groupId}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatarSRC\n      })\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  _checkServerResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } // Если происходит ошибка, отклоняем промис\n\n\n    return Promise.reject(`${res.status}`);\n  }\n\n  getAppInfo() {\n    return Promise.all([this.getCards(), this.getUserInfo()]);\n  }\n\n}\n\nconst api = new Api({\n  address: 'https://mesto.nomoreparties.co/v1',\n  groupId: 'cohort-24',\n  token: '4d34d552-bc81-44cb-b18a-2296a1ced45f'\n});\nexport default api;","map":{"version":3,"sources":["/Users/AleksiTarasov/Desktop/develop/mesto-react/src/utils/api.js"],"names":["Api","constructor","options","_address","address","_groupId","groupId","_token","token","getUserInfo","fetch","headers","authorization","then","res","_checkServerResponse","patchUserInfo","name","inputName","about","inputJob","method","body","JSON","stringify","getCards","postCard","link","inputSRC","deleteCard","cardId","setLike","deleteLike","patchUserAvatar","avatarSRC","avatar","ok","json","Promise","reject","status","getAppInfo","all","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor(options) {\n        this._address = options.address\n        this._groupId = options.groupId\n        this._token = options.token\n    }\n    getUserInfo() {\n        return fetch(`${this._address}/${this._groupId}/users/me`, {\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }\n        })\n         .then(res => this._checkServerResponse(res))\n    }\n\n    patchUserInfo({name: inputName, about: inputJob}) {\n        return fetch(`${this._address}/${this._groupId}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: inputName,\n                about: inputJob,\n            })\n    })\n        .then(res => this._checkServerResponse(res))    \n    }\n\n    getCards() {\n        return fetch(`${this._address}/${this._groupId}/cards`, {\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => this._checkServerResponse(res)) \n    }\n    postCard({name: inputName, link: inputSRC}) {\n        return fetch(`${this._address}/${this._groupId}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: inputName,\n                link: inputSRC\n            })\n        })\n        .then(res => this._checkServerResponse(res)) \n        }\n    deleteCard(cardId){\n        return fetch(`${this._address}/${this._groupId}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n        .then(res => this._checkServerResponse(res)) \n        }\n    setLike(cardId){\n        return fetch(`${this._address}/${this._groupId}/cards/likes/${cardId}`, {\n            method: 'PUT',\n            headers: {\n                authorization: this._token,\n            }\n        })\n        .then(res => this._checkServerResponse(res)) \n    }\n    deleteLike(cardId){\n        return fetch(`${this._address}/${this._groupId}/cards/likes/${cardId}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n        .then(res => this._checkServerResponse(res)) \n    }\n    patchUserAvatar(avatarSRC) {\n        return fetch(`${this._address}/${this._groupId}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n               avatar: avatarSRC\n            })\n    })\n        .then(res => this._checkServerResponse(res))  \n    }\n\n    _checkServerResponse(res) {\n        if (res.ok) {\n            return res.json()\n        }\n    // Если происходит ошибка, отклоняем промис\n    return Promise.reject(`${res.status}`)\n    }\n\n    getAppInfo() {\n        return Promise.all([this.getCards(), this.getUserInfo()])\n    }\n        \n}\n\nconst api = new Api({\n    address: 'https://mesto.nomoreparties.co/v1',\n    groupId: 'cohort-24',\n    token: '4d34d552-bc81-44cb-b18a-2296a1ced45f'\n  })\n\nexport default api"]},"metadata":{},"sourceType":"module"}